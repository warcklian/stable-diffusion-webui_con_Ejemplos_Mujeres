#!/usr/bin/env python3
"""
Script de verificaci√≥n simplificado del modelo actual en WebUI
Verifica que el modelo seleccionado coincida con el modelo cargado
"""

import sys
import os
import json
from pathlib import Path

def verificar_configuracion_webui():
    """Verifica la configuraci√≥n de WebUI sin inicializar completamente"""
    print("üîç Verificador de Configuraci√≥n WebUI")
    print("=" * 50)
    
    try:
        # Buscar archivo de configuraci√≥n
        config_file = Path("config.json")
        if not config_file.exists():
            print("‚ö†Ô∏è No se encontr√≥ archivo config.json")
            return False
        
        # Leer configuraci√≥n
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("‚úÖ Archivo de configuraci√≥n encontrado")
        
        # Obtener modelo seleccionado
        selected_model = config.get("sd_model_checkpoint", None)
        if selected_model:
            print(f"‚úÖ Modelo seleccionado en configuraci√≥n: {selected_model}")
        else:
            print("‚ö†Ô∏è No hay modelo seleccionado en configuraci√≥n")
            return False
        
        # Verificar si el modelo existe
        models_dir = Path("models/Stable-diffusion")
        if models_dir.exists():
            model_files = list(models_dir.glob("*.safetensors")) + list(models_dir.glob("*.ckpt"))
            print(f"‚úÖ Directorio de modelos encontrado: {len(model_files)} archivos")
            
            # Buscar el modelo seleccionado
            model_found = False
            for model_file in model_files:
                if selected_model in model_file.name or model_file.stem == selected_model:
                    print(f"‚úÖ Modelo encontrado: {model_file.name}")
                    model_found = True
                    break
            
            if not model_found:
                print(f"‚ö†Ô∏è Modelo seleccionado no encontrado en el directorio")
                print(f"   Buscando: {selected_model}")
                print(f"   Archivos disponibles: {[f.name for f in model_files[:5]]}")
                return False
        else:
            print("‚ö†Ô∏è Directorio de modelos no encontrado")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {e}")
        return False

def verificar_generador_masivo():
    """Verifica el generador masivo integrado"""
    print("\nüöÄ Verificador del Generador Masivo")
    print("=" * 40)
    
    try:
        from webui_massive_generator import WebUIMassiveGenerator
        print("‚úÖ Generador masivo importado correctamente")
        
        # Crear instancia de prueba
        generator = WebUIMassiveGenerator()
        print("‚úÖ Instancia del generador creada")
        
        # Probar obtenci√≥n de informaci√≥n del modelo
        model_info = generator._get_current_model_info()
        print("‚úÖ Informaci√≥n del modelo obtenida:")
        print(f"   - Nombre: {model_info['model_name']}")
        print(f"   - T√≠tulo: {model_info['model_title']}")
        print(f"   - Tipo: {model_info['model_type']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando generador masivo: {e}")
        return False

def verificar_archivos_consulta():
    """Verifica los archivos de configuraci√≥n de Consulta"""
    print("\nüìÅ Verificador de Archivos Consulta")
    print("=" * 40)
    
    try:
        consulta_dir = Path("Consulta")
        if not consulta_dir.exists():
            print("‚ùå Directorio Consulta no encontrado")
            return False
        
        print("‚úÖ Directorio Consulta encontrado")
        
        # Verificar archivos importantes
        archivos_importantes = [
            "gui_config.json",
            "optimized_prompts.json",
            "intelligent_ethnic_data.json"
        ]
        
        for archivo in archivos_importantes:
            archivo_path = consulta_dir / archivo
            if archivo_path.exists():
                print(f"‚úÖ {archivo} encontrado")
            else:
                print(f"‚ö†Ô∏è {archivo} no encontrado")
        
        # Verificar directorio countries
        countries_dir = consulta_dir / "countries"
        if countries_dir.exists():
            country_files = list(countries_dir.glob("*.json"))
            print(f"‚úÖ Directorio countries encontrado: {len(country_files)} archivos")
            
            # Mostrar algunos archivos
            for country_file in country_files[:3]:
                print(f"   - {country_file.name}")
        else:
            print("‚ö†Ô∏è Directorio countries no encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando archivos Consulta: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç Verificador Completo de Sistema de Pasaportes")
    print("=" * 60)
    
    # Verificar configuraci√≥n WebUI
    config_ok = verificar_configuracion_webui()
    
    # Verificar generador masivo
    generador_ok = verificar_generador_masivo()
    
    # Verificar archivos Consulta
    consulta_ok = verificar_archivos_consulta()
    
    # Resumen final
    print("\nüìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 30)
    print(f"‚úÖ Configuraci√≥n WebUI: {'OK' if config_ok else 'ERROR'}")
    print(f"‚úÖ Generador Masivo: {'OK' if generador_ok else 'ERROR'}")
    print(f"‚úÖ Archivos Consulta: {'OK' if consulta_ok else 'ERROR'}")
    
    if config_ok and generador_ok and consulta_ok:
        print("\nüéâ ¬°Todas las verificaciones pasaron exitosamente!")
        print("üí° El sistema est√° listo para generar im√°genes de pasaportes")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Ejecuta WebUI: ./webui.sh")
        print("2. Ve a la pesta√±a 'txt2img'")
        print("3. Busca el acorde√≥n 'üáªüá™ Pasaportes Venezolanos'")
        print("4. Haz clic en 'üîç Verificar Modelo' para confirmar el modelo")
        print("5. ¬°Comienza a generar im√°genes de pasaportes!")
        return True
    else:
        print("\n‚ö†Ô∏è Algunas verificaciones fallaron")
        print("üí° Revisa los errores anteriores")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
